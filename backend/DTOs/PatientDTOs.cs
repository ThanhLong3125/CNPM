// DTOs/PatientDTOs.cs
using System.ComponentModel.DataAnnotations;

namespace backend.DTOs
{
    public class PatientDto
    {
        public Guid Id { get; set; }
        public string FullName { get; set; } = string.Empty;
        public DateTime DateOfBirth { get; set; }
        public string Gender { get; set; } = string.Empty;
        public string? ContactInfo { get; set; }
        public string? MedicalHistory { get; set; }
        public int MedicalRecordCount { get; set; }
    }

    public class CreatePatientDto
    {
        // No Id here, as it's generated by the backend/DB
        [Required(ErrorMessage = "Full Name is required.")]
        [StringLength(100, ErrorMessage = "Full Name cannot exceed 100 characters.")]
        public string FullName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Date of Birth is required.")]
        [DataType(DataType.Date, ErrorMessage = "Invalid Date of Birth format.")]
        public DateTime DateOfBirth { get; set; }

        [Required(ErrorMessage = "Gender is required.")]
        [StringLength(20, ErrorMessage = "Gender cannot exceed 20 characters.")]
        public string Gender { get; set; } = string.Empty; // Consider an enum for fixed values

        [StringLength(200, ErrorMessage = "Contact Info cannot exceed 200 characters.")]
        public string? ContactInfo { get; set; }

        [StringLength(1000, ErrorMessage = "Medical History cannot exceed 1000 characters.")]
        public string? MedicalHistory { get; set; }
    }

    public class UpdatePatientDto
    {
        [StringLength(100, ErrorMessage = "Full Name cannot exceed 100 characters.")]
        public string? FullName { get; set; } // Nullable if updates are partial

        // For date, you might consider string and parse it, or nullable DateTime
        [DataType(DataType.Date, ErrorMessage = "Invalid Date of Birth format.")]
        public DateTime? DateOfBirth { get; set; }

        [StringLength(20, ErrorMessage = "Gender cannot exceed 20 characters.")]
        public string? Gender { get; set; }

        [StringLength(200, ErrorMessage = "Contact Info cannot exceed 200 characters.")]
        public string? ContactInfo { get; set; }

        [StringLength(1000, ErrorMessage = "Medical History cannot exceed 1000 characters.")]
        public string? MedicalHistory { get; set; }
    }
}
