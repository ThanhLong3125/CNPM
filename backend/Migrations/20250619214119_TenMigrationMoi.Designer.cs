// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using backend.Data;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250619214119_TenMigrationMoi")]
    partial class TenMigrationMoi
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("backend.Models.MedicalRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Record_ID");

                    b.Property<Guid>("AssignedPhysicianId")
                        .HasColumnType("uuid")
                        .HasColumnName("AssignedPhysicianId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<bool>("IsPriority")
                        .HasColumnType("boolean")
                        .HasColumnName("IsPriority");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid")
                        .HasColumnName("Patient_ID");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean")
                        .HasColumnName("Status");

                    b.Property<string>("Symptoms")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Symptoms");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("MedicalRecords");
                });

            modelBuilder.Entity("backend.Models.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Patient_ID");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateOfBirth");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("Email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Full_name");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Gender");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("Phone");

                    b.Property<string>("Symptoms")
                        .HasColumnType("text")
                        .HasColumnName("Symptoms");

                    b.HasKey("Id");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("backend.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Full_name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("Specialty")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7d6e7366-6698-452d-80ce-e01ac06a9240"),
                            Email = "admin@aidims.com",
                            Full_name = "Admin",
                            PasswordHash = "$2a$11$eQvxOOY7D/OvPVJUUNOnEux4/hz91clNi2CdVB9NxhO1mmBKpOFYy",
                            PhoneNumber = "",
                            Role = 1
                        },
                        new
                        {
                            Id = new Guid("5029d4cf-fe56-4b59-8404-155efa3de1c3"),
                            Email = "staff@aidims.com",
                            Full_name = "Staff",
                            PasswordHash = "$2a$11$i14UDRFSaG3GJoE3OrGAdu8dFgnkIu/ZL/FNrf8ere6ztfRjqEZeu",
                            PhoneNumber = "",
                            Role = 3
                        },
                        new
                        {
                            Id = new Guid("469b1680-57f0-42e2-ba04-91f30486d178"),
                            Email = "doctor1@aidims.com",
                            Full_name = "Thanh Long",
                            PasswordHash = "$2a$11$Cx.FL5C1/g9FxxGjpn20r.MAOfO1O0rdwgmkcQXHhzryOJ1ji2aeu",
                            PhoneNumber = "",
                            Role = 2,
                            Specialty = "Radiology"
                        },
                        new
                        {
                            Id = new Guid("94adafdc-e442-4326-8e36-41f2fb17f5b7"),
                            Email = "doctor2@aidims.com",
                            Full_name = "Hoang Thien",
                            PasswordHash = "$2a$11$tzB7zAGnlYPm1D.bPkvueO4UGWLLlW25494csm6VByCRq9y6wxiE.",
                            PhoneNumber = "",
                            Role = 2,
                            Specialty = "Cardiology"
                        },
                        new
                        {
                            Id = new Guid("c6db6f62-40ca-43f3-a40a-eef91dedb953"),
                            Email = "doctor3@aidims.com",
                            Full_name = "Khang To",
                            PasswordHash = "$2a$11$HpftM4LcazY1s4e8VOrS3u386xwJ7bYv/ddI2ew25xUeQ/P9l4vJG",
                            PhoneNumber = "",
                            Role = 2,
                            Specialty = "Neurology"
                        });
                });

            modelBuilder.Entity("backend.Models.MedicalRecord", b =>
                {
                    b.HasOne("backend.Models.Patient", "Patient")
                        .WithMany("MedicalRecords")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("backend.Models.Patient", b =>
                {
                    b.Navigation("MedicalRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
