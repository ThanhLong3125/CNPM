// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using backend.Data;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250626044247_Ten")]
    partial class Ten
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("backend.Models.Diagnosis", b =>
                {
                    b.Property<string>("DiagnosisId")
                        .HasColumnType("text");

                    b.Property<DateTime>("DiagnosedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("MedicalRecordId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.HasKey("DiagnosisId");

                    b.HasIndex("MedicalRecordId");

                    b.ToTable("Diagnoses");
                });

            modelBuilder.Entity("backend.Models.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AIAnalysis")
                        .HasColumnType("text");

                    b.Property<string>("DiagnosisId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DiagnosisId1")
                        .HasColumnType("text");

                    b.Property<string>("ImageId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasAlternateKey("ImageId");

                    b.HasIndex("DiagnosisId");

                    b.HasIndex("DiagnosisId1")
                        .IsUnique();

                    b.ToTable("Images");
                });

            modelBuilder.Entity("backend.Models.MedicalRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Record_ID");

                    b.Property<string>("AssignedPhysicianId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("AssignedPhysicianId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<bool>("IsPriority")
                        .HasColumnType("boolean")
                        .HasColumnName("IsPriority");

                    b.Property<string>("MedicalRecordId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("MedicalRecordId");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Patient_ID");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean")
                        .HasColumnName("Status");

                    b.Property<string>("Symptoms")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Symptoms");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("MedicalRecords");
                });

            modelBuilder.Entity("backend.Models.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Patient_GUID");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("DateOfBirth");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("Email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Full_name");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Gender");

                    b.Property<string>("IdPatient")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Patient_ID");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("MedicalHistory")
                        .HasColumnType("text")
                        .HasColumnName("MedicalHistory");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("Phone");

                    b.HasKey("Id");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("backend.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Full_name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhysicianId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("Specialty")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a042e89c-8504-4bd6-9f92-8ce7dfbc4b8b"),
                            Email = "admin@aidims.com",
                            Full_name = "Admin",
                            PasswordHash = "$2a$11$uw44Qy3poJCcpYZ0zoJwAO6aBQrjeI1jIIbvioGHi26qj6fHvT2va",
                            PhoneNumber = "",
                            PhysicianId = "BSA042E8",
                            Role = 1
                        },
                        new
                        {
                            Id = new Guid("fcd1d252-a408-4e65-b966-338f941324f1"),
                            Email = "staff@aidims.com",
                            Full_name = "Staff",
                            PasswordHash = "$2a$11$eir3eHZxSYyPCxaMneyeHuBCadBmVYBF8T.zo/rNnPpOm78NnQSs.",
                            PhoneNumber = "0999765432",
                            PhysicianId = "BSFCD1D2",
                            Role = 3
                        },
                        new
                        {
                            Id = new Guid("91e486d5-bef6-473b-9b50-d7c4bff8a007"),
                            Email = "doctor1@aidims.com",
                            Full_name = "Thanh Long",
                            PasswordHash = "$2a$11$kRaODMHNad1cuzRwr.qk/.Wrrp/Z4Px8wd03EJteL6BY8T6KfrCTO",
                            PhoneNumber = "0999765432",
                            PhysicianId = "BS91E486",
                            Role = 2,
                            Specialty = "Radiology"
                        },
                        new
                        {
                            Id = new Guid("87fea2c7-d511-4a72-8b9b-41306c5ac646"),
                            Email = "doctor2@aidims.com",
                            Full_name = "Hoang Thien",
                            PasswordHash = "$2a$11$9tcBlAbYAqShVoxDAecdSuPayqbtyMWhZ7wDOmU0UvQQL.Z1jOl.u",
                            PhoneNumber = "",
                            PhysicianId = "BS87FEA2",
                            Role = 2,
                            Specialty = "Cardiology"
                        },
                        new
                        {
                            Id = new Guid("d868d6a4-e32d-4b67-961e-900d28b32bdd"),
                            Email = "doctor3@aidims.com",
                            Full_name = "Khang To",
                            PasswordHash = "$2a$11$Ox/BC8EmF1xp4LMXr/kPXu6kd29iR4So99nyWPfjEpbBYlbWMpC1y",
                            PhoneNumber = "",
                            PhysicianId = "BSD868D6",
                            Role = 2,
                            Specialty = "Neurology"
                        });
                });

            modelBuilder.Entity("backend.Models.Diagnosis", b =>
                {
                    b.HasOne("backend.Models.MedicalRecord", "MedicalRecord")
                        .WithMany()
                        .HasForeignKey("MedicalRecordId")
                        .HasPrincipalKey("MedicalRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicalRecord");
                });

            modelBuilder.Entity("backend.Models.Image", b =>
                {
                    b.HasOne("backend.Models.Diagnosis", "Diagnosis")
                        .WithMany()
                        .HasForeignKey("DiagnosisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.Diagnosis", null)
                        .WithOne("Image")
                        .HasForeignKey("backend.Models.Image", "DiagnosisId1");

                    b.Navigation("Diagnosis");
                });

            modelBuilder.Entity("backend.Models.MedicalRecord", b =>
                {
                    b.HasOne("backend.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .HasPrincipalKey("IdPatient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("backend.Models.Diagnosis", b =>
                {
                    b.Navigation("Image");
                });
#pragma warning restore 612, 618
        }
    }
}
