// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using backend.Data;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("backend.Models.MedicalRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Record_ID");

                    b.Property<string>("AssignedPhysicianId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("AssignedPhysicianId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<bool>("IsPriority")
                        .HasColumnType("boolean")
                        .HasColumnName("IsPriority");

                    b.Property<string>("MedicalRecordId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("MedicalRecordId");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Patient_ID");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean")
                        .HasColumnName("Status");

                    b.Property<string>("Symptoms")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Symptoms");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("MedicalRecords");
                });

            modelBuilder.Entity("backend.Models.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Patient_GUID");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateOfBirth");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("Email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Full_name");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Gender");

                    b.Property<string>("IdPatient")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Patient_ID");

                    b.Property<string>("MedicalHistory")
                        .HasColumnType("text")
                        .HasColumnName("MedicalHistory");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("Phone");

                    b.HasKey("Id");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("backend.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Full_name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhysicianId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("Specialty")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("eb860258-2620-450a-b193-cabc198a017f"),
                            Email = "admin@aidims.com",
                            Full_name = "Admin",
                            PasswordHash = "$2a$11$bq3CCVKcbMmYKJ018/uD5.ImHhabTZ7bqgX/bahA0gWO0.ScrsMoa",
                            PhoneNumber = "",
                            PhysicianId = "BSEB8602",
                            Role = 1
                        },
                        new
                        {
                            Id = new Guid("aa6e9b18-caee-4e3e-b8bf-4bf321f9e670"),
                            Email = "staff@aidims.com",
                            Full_name = "Staff",
                            PasswordHash = "$2a$11$aYrb575h.aYKaFhJpTIGMumTRAV2PcQxkp55WpAqAWovtukbpKJ1W",
                            PhoneNumber = "",
                            PhysicianId = "BSAA6E9B",
                            Role = 3
                        },
                        new
                        {
                            Id = new Guid("f1545025-5fb4-40eb-8e4c-13b08d7ed2bd"),
                            Email = "doctor1@aidims.com",
                            Full_name = "Thanh Long",
                            PasswordHash = "$2a$11$LzLtj7RDkmaHErd72rK8f.0YM3pWHCObMdQ981pF4Q2pZIKnfzXpu",
                            PhoneNumber = "",
                            PhysicianId = "BSF15450",
                            Role = 2,
                            Specialty = "Radiology"
                        },
                        new
                        {
                            Id = new Guid("ce06d159-2784-4304-ad2c-397162014514"),
                            Email = "doctor2@aidims.com",
                            Full_name = "Hoang Thien",
                            PasswordHash = "$2a$11$5fsaR5um6.XCm3eJHFEjbOWqkeohkeUChE13aBzNkoVPE/BelWqd6",
                            PhoneNumber = "",
                            PhysicianId = "BSCE06D1",
                            Role = 2,
                            Specialty = "Cardiology"
                        },
                        new
                        {
                            Id = new Guid("eec93066-89d3-4d17-b135-43742ee8090f"),
                            Email = "doctor3@aidims.com",
                            Full_name = "Khang To",
                            PasswordHash = "$2a$11$MJZ/KaNRPUANdQZ.B66jWOhcHAjsqhfM1V1qGtJRX0LYwEi9oDQzy",
                            PhoneNumber = "",
                            PhysicianId = "BSEEC930",
                            Role = 2,
                            Specialty = "Neurology"
                        });
                });

            modelBuilder.Entity("backend.Models.MedicalRecord", b =>
                {
                    b.HasOne("backend.Models.Patient", "Patient")
                        .WithMany("MedicalRecords")
                        .HasForeignKey("PatientId")
                        .HasPrincipalKey("IdPatient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("backend.Models.Patient", b =>
                {
                    b.Navigation("MedicalRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
