// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using backend.Data;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("backend.Models.Diagnosis", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DiagnosedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MedicalRecordId")
                        .HasColumnType("uuid");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MedicalRecordId")
                        .IsUnique();

                    b.ToTable("Diagnoses");
                });

            modelBuilder.Entity("backend.Models.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AIAnalysis")
                        .HasColumnType("text");

                    b.Property<Guid>("DiagnosisId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DiagnosisId")
                        .IsUnique();

                    b.ToTable("Images");
                });

            modelBuilder.Entity("backend.Models.MedicalRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Record_ID");

                    b.Property<Guid>("AssignedPhysicianId")
                        .HasColumnType("uuid")
                        .HasColumnName("AssignedPhysicianId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPriority")
                        .HasColumnType("boolean")
                        .HasColumnName("IsPriority");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid")
                        .HasColumnName("Patient_ID");

                    b.Property<string>("Symptoms")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Symptoms");

                    b.HasKey("Id");

                    b.HasIndex("AssignedPhysicianId");

                    b.HasIndex("PatientId");

                    b.ToTable("MedicalRecords");
                });

            modelBuilder.Entity("backend.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Notification_ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreateAt");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean")
                        .HasColumnName("IsRead");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Message");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("User_ID");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("backend.Models.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Patient_ID");

                    b.Property<string>("ContactInfo")
                        .HasColumnType("text")
                        .HasColumnName("ContactInfo");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("DateOfBirth");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Full_name");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Gender");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("MedicalHistory")
                        .HasColumnType("text")
                        .HasColumnName("MedicalHistory");

                    b.HasKey("Id");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("backend.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Full_name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("Specialty")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4764155f-b479-4ea6-a336-97bdda760f3f"),
                            Email = "admin@aidims.com",
                            Full_name = "Admin",
                            PasswordHash = "$2a$11$INjZLHFaFw7dHReuEzq5zue1cv.6uSsk2ykw4F.LGHcHCULz4qieG",
                            PhoneNumber = "",
                            Role = 1
                        },
                        new
                        {
                            Id = new Guid("d7b4a6e7-1a63-4fbb-9db9-3f772128262c"),
                            Email = "staff@aidims.com",
                            Full_name = "Staff",
                            PasswordHash = "$2a$11$zfqn80PIUmsVl2WxKICYnOZJQ4lpa4KMce/oq1B1lGlCEWFZCylLG",
                            PhoneNumber = "",
                            Role = 3
                        },
                        new
                        {
                            Id = new Guid("f4dba8c6-b87b-4ead-9c28-e249756c65c1"),
                            Email = "doctor1@aidims.com",
                            Full_name = "Thanh Long",
                            PasswordHash = "$2a$11$vODdFqOvJ/BLI/zpjIEzSu0p/h1A0ZbkQ3W7PFqLunrZXhzsS6jFK",
                            PhoneNumber = "",
                            Role = 2,
                            Specialty = "Radiology"
                        },
                        new
                        {
                            Id = new Guid("44b5c3aa-8504-4814-bfb6-1f45a6376553"),
                            Email = "doctor2@aidims.com",
                            Full_name = "Hoang Thien",
                            PasswordHash = "$2a$11$n.pT23MDIzUsNEhpinTXPOM7RQ567I7sNBiLEj798xslSKYc/tR.e",
                            PhoneNumber = "",
                            Role = 2,
                            Specialty = "Cardiology"
                        },
                        new
                        {
                            Id = new Guid("3c9fbe45-ba63-4b52-8bd6-f2455f0c553f"),
                            Email = "doctor3@aidims.com",
                            Full_name = "Khang To",
                            PasswordHash = "$2a$11$R.A6xskHY.R3tAIqV98la.yyt.oqlPQ3tQdTJzsmznN8gzus8WNp6",
                            PhoneNumber = "",
                            Role = 2,
                            Specialty = "Neurology"
                        });
                });

            modelBuilder.Entity("backend.Models.Diagnosis", b =>
                {
                    b.HasOne("backend.Models.MedicalRecord", "MedicalRecord")
                        .WithOne("Diagnosis")
                        .HasForeignKey("backend.Models.Diagnosis", "MedicalRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicalRecord");
                });

            modelBuilder.Entity("backend.Models.Image", b =>
                {
                    b.HasOne("backend.Models.Diagnosis", "Diagnosis")
                        .WithOne("Image")
                        .HasForeignKey("backend.Models.Image", "DiagnosisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diagnosis");
                });

            modelBuilder.Entity("backend.Models.MedicalRecord", b =>
                {
                    b.HasOne("backend.Models.User", "User")
                        .WithMany("MedicalRecords")
                        .HasForeignKey("AssignedPhysicianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.Patient", "Patient")
                        .WithMany("MedicalRecords")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Models.Notification", b =>
                {
                    b.HasOne("backend.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Models.Diagnosis", b =>
                {
                    b.Navigation("Image");
                });

            modelBuilder.Entity("backend.Models.MedicalRecord", b =>
                {
                    b.Navigation("Diagnosis");
                });

            modelBuilder.Entity("backend.Models.Patient", b =>
                {
                    b.Navigation("MedicalRecords");
                });

            modelBuilder.Entity("backend.Models.User", b =>
                {
                    b.Navigation("MedicalRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
